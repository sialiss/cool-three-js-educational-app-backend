
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `TheoryLesson` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model TheoryLesson
 * 
 */
export type TheoryLessonModel = runtime.Types.Result.DefaultSelection<Prisma.$TheoryLessonPayload>

export type AggregateTheoryLesson = {
  _count: TheoryLessonCountAggregateOutputType | null
  _avg: TheoryLessonAvgAggregateOutputType | null
  _sum: TheoryLessonSumAggregateOutputType | null
  _min: TheoryLessonMinAggregateOutputType | null
  _max: TheoryLessonMaxAggregateOutputType | null
}

export type TheoryLessonAvgAggregateOutputType = {
  id: number | null
  lessonId: number | null
}

export type TheoryLessonSumAggregateOutputType = {
  id: number | null
  lessonId: number | null
}

export type TheoryLessonMinAggregateOutputType = {
  id: number | null
  content: string | null
  lessonId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TheoryLessonMaxAggregateOutputType = {
  id: number | null
  content: string | null
  lessonId: number | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type TheoryLessonCountAggregateOutputType = {
  id: number
  content: number
  lessonId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type TheoryLessonAvgAggregateInputType = {
  id?: true
  lessonId?: true
}

export type TheoryLessonSumAggregateInputType = {
  id?: true
  lessonId?: true
}

export type TheoryLessonMinAggregateInputType = {
  id?: true
  content?: true
  lessonId?: true
  createdAt?: true
  updatedAt?: true
}

export type TheoryLessonMaxAggregateInputType = {
  id?: true
  content?: true
  lessonId?: true
  createdAt?: true
  updatedAt?: true
}

export type TheoryLessonCountAggregateInputType = {
  id?: true
  content?: true
  lessonId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type TheoryLessonAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TheoryLesson to aggregate.
   */
  where?: Prisma.TheoryLessonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TheoryLessons to fetch.
   */
  orderBy?: Prisma.TheoryLessonOrderByWithRelationInput | Prisma.TheoryLessonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TheoryLessonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TheoryLessons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TheoryLessons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned TheoryLessons
  **/
  _count?: true | TheoryLessonCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TheoryLessonAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TheoryLessonSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TheoryLessonMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TheoryLessonMaxAggregateInputType
}

export type GetTheoryLessonAggregateType<T extends TheoryLessonAggregateArgs> = {
      [P in keyof T & keyof AggregateTheoryLesson]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTheoryLesson[P]>
    : Prisma.GetScalarType<T[P], AggregateTheoryLesson[P]>
}




export type TheoryLessonGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TheoryLessonWhereInput
  orderBy?: Prisma.TheoryLessonOrderByWithAggregationInput | Prisma.TheoryLessonOrderByWithAggregationInput[]
  by: Prisma.TheoryLessonScalarFieldEnum[] | Prisma.TheoryLessonScalarFieldEnum
  having?: Prisma.TheoryLessonScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: TheoryLessonCountAggregateInputType | true
  _avg?: TheoryLessonAvgAggregateInputType
  _sum?: TheoryLessonSumAggregateInputType
  _min?: TheoryLessonMinAggregateInputType
  _max?: TheoryLessonMaxAggregateInputType
}

export type TheoryLessonGroupByOutputType = {
  id: number
  content: string
  lessonId: number
  createdAt: Date
  updatedAt: Date
  _count: TheoryLessonCountAggregateOutputType | null
  _avg: TheoryLessonAvgAggregateOutputType | null
  _sum: TheoryLessonSumAggregateOutputType | null
  _min: TheoryLessonMinAggregateOutputType | null
  _max: TheoryLessonMaxAggregateOutputType | null
}

type GetTheoryLessonGroupByPayload<T extends TheoryLessonGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TheoryLessonGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TheoryLessonGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TheoryLessonGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TheoryLessonGroupByOutputType[P]>
      }
    >
  > 



export type TheoryLessonWhereInput = {
  AND?: Prisma.TheoryLessonWhereInput | Prisma.TheoryLessonWhereInput[]
  OR?: Prisma.TheoryLessonWhereInput[]
  NOT?: Prisma.TheoryLessonWhereInput | Prisma.TheoryLessonWhereInput[]
  id?: Prisma.IntFilter<"TheoryLesson"> | number
  content?: Prisma.StringFilter<"TheoryLesson"> | string
  lessonId?: Prisma.IntFilter<"TheoryLesson"> | number
  createdAt?: Prisma.DateTimeFilter<"TheoryLesson"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TheoryLesson"> | Date | string
  lesson?: Prisma.XOR<Prisma.LessonScalarRelationFilter, Prisma.LessonWhereInput>
  completedBy?: Prisma.UserListRelationFilter
}

export type TheoryLessonOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  lesson?: Prisma.LessonOrderByWithRelationInput
  completedBy?: Prisma.UserOrderByRelationAggregateInput
}

export type TheoryLessonWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  lessonId?: number
  AND?: Prisma.TheoryLessonWhereInput | Prisma.TheoryLessonWhereInput[]
  OR?: Prisma.TheoryLessonWhereInput[]
  NOT?: Prisma.TheoryLessonWhereInput | Prisma.TheoryLessonWhereInput[]
  content?: Prisma.StringFilter<"TheoryLesson"> | string
  createdAt?: Prisma.DateTimeFilter<"TheoryLesson"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TheoryLesson"> | Date | string
  lesson?: Prisma.XOR<Prisma.LessonScalarRelationFilter, Prisma.LessonWhereInput>
  completedBy?: Prisma.UserListRelationFilter
}, "id" | "lessonId">

export type TheoryLessonOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.TheoryLessonCountOrderByAggregateInput
  _avg?: Prisma.TheoryLessonAvgOrderByAggregateInput
  _max?: Prisma.TheoryLessonMaxOrderByAggregateInput
  _min?: Prisma.TheoryLessonMinOrderByAggregateInput
  _sum?: Prisma.TheoryLessonSumOrderByAggregateInput
}

export type TheoryLessonScalarWhereWithAggregatesInput = {
  AND?: Prisma.TheoryLessonScalarWhereWithAggregatesInput | Prisma.TheoryLessonScalarWhereWithAggregatesInput[]
  OR?: Prisma.TheoryLessonScalarWhereWithAggregatesInput[]
  NOT?: Prisma.TheoryLessonScalarWhereWithAggregatesInput | Prisma.TheoryLessonScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"TheoryLesson"> | number
  content?: Prisma.StringWithAggregatesFilter<"TheoryLesson"> | string
  lessonId?: Prisma.IntWithAggregatesFilter<"TheoryLesson"> | number
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"TheoryLesson"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"TheoryLesson"> | Date | string
}

export type TheoryLessonCreateInput = {
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  lesson: Prisma.LessonCreateNestedOneWithoutTheoryInput
  completedBy?: Prisma.UserCreateNestedManyWithoutCompletedTheoryLessonsInput
}

export type TheoryLessonUncheckedCreateInput = {
  id?: number
  content: string
  lessonId: number
  createdAt?: Date | string
  updatedAt?: Date | string
  completedBy?: Prisma.UserUncheckedCreateNestedManyWithoutCompletedTheoryLessonsInput
}

export type TheoryLessonUpdateInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  lesson?: Prisma.LessonUpdateOneRequiredWithoutTheoryNestedInput
  completedBy?: Prisma.UserUpdateManyWithoutCompletedTheoryLessonsNestedInput
}

export type TheoryLessonUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  lessonId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedBy?: Prisma.UserUncheckedUpdateManyWithoutCompletedTheoryLessonsNestedInput
}

export type TheoryLessonCreateManyInput = {
  id?: number
  content: string
  lessonId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TheoryLessonUpdateManyMutationInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TheoryLessonUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  lessonId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TheoryLessonListRelationFilter = {
  every?: Prisma.TheoryLessonWhereInput
  some?: Prisma.TheoryLessonWhereInput
  none?: Prisma.TheoryLessonWhereInput
}

export type TheoryLessonOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type TheoryLessonNullableScalarRelationFilter = {
  is?: Prisma.TheoryLessonWhereInput | null
  isNot?: Prisma.TheoryLessonWhereInput | null
}

export type TheoryLessonCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TheoryLessonAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
}

export type TheoryLessonMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TheoryLessonMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  content?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type TheoryLessonSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  lessonId?: Prisma.SortOrder
}

export type TheoryLessonCreateNestedManyWithoutCompletedByInput = {
  create?: Prisma.XOR<Prisma.TheoryLessonCreateWithoutCompletedByInput, Prisma.TheoryLessonUncheckedCreateWithoutCompletedByInput> | Prisma.TheoryLessonCreateWithoutCompletedByInput[] | Prisma.TheoryLessonUncheckedCreateWithoutCompletedByInput[]
  connectOrCreate?: Prisma.TheoryLessonCreateOrConnectWithoutCompletedByInput | Prisma.TheoryLessonCreateOrConnectWithoutCompletedByInput[]
  connect?: Prisma.TheoryLessonWhereUniqueInput | Prisma.TheoryLessonWhereUniqueInput[]
}

export type TheoryLessonUncheckedCreateNestedManyWithoutCompletedByInput = {
  create?: Prisma.XOR<Prisma.TheoryLessonCreateWithoutCompletedByInput, Prisma.TheoryLessonUncheckedCreateWithoutCompletedByInput> | Prisma.TheoryLessonCreateWithoutCompletedByInput[] | Prisma.TheoryLessonUncheckedCreateWithoutCompletedByInput[]
  connectOrCreate?: Prisma.TheoryLessonCreateOrConnectWithoutCompletedByInput | Prisma.TheoryLessonCreateOrConnectWithoutCompletedByInput[]
  connect?: Prisma.TheoryLessonWhereUniqueInput | Prisma.TheoryLessonWhereUniqueInput[]
}

export type TheoryLessonUpdateManyWithoutCompletedByNestedInput = {
  create?: Prisma.XOR<Prisma.TheoryLessonCreateWithoutCompletedByInput, Prisma.TheoryLessonUncheckedCreateWithoutCompletedByInput> | Prisma.TheoryLessonCreateWithoutCompletedByInput[] | Prisma.TheoryLessonUncheckedCreateWithoutCompletedByInput[]
  connectOrCreate?: Prisma.TheoryLessonCreateOrConnectWithoutCompletedByInput | Prisma.TheoryLessonCreateOrConnectWithoutCompletedByInput[]
  upsert?: Prisma.TheoryLessonUpsertWithWhereUniqueWithoutCompletedByInput | Prisma.TheoryLessonUpsertWithWhereUniqueWithoutCompletedByInput[]
  set?: Prisma.TheoryLessonWhereUniqueInput | Prisma.TheoryLessonWhereUniqueInput[]
  disconnect?: Prisma.TheoryLessonWhereUniqueInput | Prisma.TheoryLessonWhereUniqueInput[]
  delete?: Prisma.TheoryLessonWhereUniqueInput | Prisma.TheoryLessonWhereUniqueInput[]
  connect?: Prisma.TheoryLessonWhereUniqueInput | Prisma.TheoryLessonWhereUniqueInput[]
  update?: Prisma.TheoryLessonUpdateWithWhereUniqueWithoutCompletedByInput | Prisma.TheoryLessonUpdateWithWhereUniqueWithoutCompletedByInput[]
  updateMany?: Prisma.TheoryLessonUpdateManyWithWhereWithoutCompletedByInput | Prisma.TheoryLessonUpdateManyWithWhereWithoutCompletedByInput[]
  deleteMany?: Prisma.TheoryLessonScalarWhereInput | Prisma.TheoryLessonScalarWhereInput[]
}

export type TheoryLessonUncheckedUpdateManyWithoutCompletedByNestedInput = {
  create?: Prisma.XOR<Prisma.TheoryLessonCreateWithoutCompletedByInput, Prisma.TheoryLessonUncheckedCreateWithoutCompletedByInput> | Prisma.TheoryLessonCreateWithoutCompletedByInput[] | Prisma.TheoryLessonUncheckedCreateWithoutCompletedByInput[]
  connectOrCreate?: Prisma.TheoryLessonCreateOrConnectWithoutCompletedByInput | Prisma.TheoryLessonCreateOrConnectWithoutCompletedByInput[]
  upsert?: Prisma.TheoryLessonUpsertWithWhereUniqueWithoutCompletedByInput | Prisma.TheoryLessonUpsertWithWhereUniqueWithoutCompletedByInput[]
  set?: Prisma.TheoryLessonWhereUniqueInput | Prisma.TheoryLessonWhereUniqueInput[]
  disconnect?: Prisma.TheoryLessonWhereUniqueInput | Prisma.TheoryLessonWhereUniqueInput[]
  delete?: Prisma.TheoryLessonWhereUniqueInput | Prisma.TheoryLessonWhereUniqueInput[]
  connect?: Prisma.TheoryLessonWhereUniqueInput | Prisma.TheoryLessonWhereUniqueInput[]
  update?: Prisma.TheoryLessonUpdateWithWhereUniqueWithoutCompletedByInput | Prisma.TheoryLessonUpdateWithWhereUniqueWithoutCompletedByInput[]
  updateMany?: Prisma.TheoryLessonUpdateManyWithWhereWithoutCompletedByInput | Prisma.TheoryLessonUpdateManyWithWhereWithoutCompletedByInput[]
  deleteMany?: Prisma.TheoryLessonScalarWhereInput | Prisma.TheoryLessonScalarWhereInput[]
}

export type TheoryLessonCreateNestedOneWithoutLessonInput = {
  create?: Prisma.XOR<Prisma.TheoryLessonCreateWithoutLessonInput, Prisma.TheoryLessonUncheckedCreateWithoutLessonInput>
  connectOrCreate?: Prisma.TheoryLessonCreateOrConnectWithoutLessonInput
  connect?: Prisma.TheoryLessonWhereUniqueInput
}

export type TheoryLessonUncheckedCreateNestedOneWithoutLessonInput = {
  create?: Prisma.XOR<Prisma.TheoryLessonCreateWithoutLessonInput, Prisma.TheoryLessonUncheckedCreateWithoutLessonInput>
  connectOrCreate?: Prisma.TheoryLessonCreateOrConnectWithoutLessonInput
  connect?: Prisma.TheoryLessonWhereUniqueInput
}

export type TheoryLessonUpdateOneWithoutLessonNestedInput = {
  create?: Prisma.XOR<Prisma.TheoryLessonCreateWithoutLessonInput, Prisma.TheoryLessonUncheckedCreateWithoutLessonInput>
  connectOrCreate?: Prisma.TheoryLessonCreateOrConnectWithoutLessonInput
  upsert?: Prisma.TheoryLessonUpsertWithoutLessonInput
  disconnect?: Prisma.TheoryLessonWhereInput | boolean
  delete?: Prisma.TheoryLessonWhereInput | boolean
  connect?: Prisma.TheoryLessonWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TheoryLessonUpdateToOneWithWhereWithoutLessonInput, Prisma.TheoryLessonUpdateWithoutLessonInput>, Prisma.TheoryLessonUncheckedUpdateWithoutLessonInput>
}

export type TheoryLessonUncheckedUpdateOneWithoutLessonNestedInput = {
  create?: Prisma.XOR<Prisma.TheoryLessonCreateWithoutLessonInput, Prisma.TheoryLessonUncheckedCreateWithoutLessonInput>
  connectOrCreate?: Prisma.TheoryLessonCreateOrConnectWithoutLessonInput
  upsert?: Prisma.TheoryLessonUpsertWithoutLessonInput
  disconnect?: Prisma.TheoryLessonWhereInput | boolean
  delete?: Prisma.TheoryLessonWhereInput | boolean
  connect?: Prisma.TheoryLessonWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.TheoryLessonUpdateToOneWithWhereWithoutLessonInput, Prisma.TheoryLessonUpdateWithoutLessonInput>, Prisma.TheoryLessonUncheckedUpdateWithoutLessonInput>
}

export type TheoryLessonCreateWithoutCompletedByInput = {
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  lesson: Prisma.LessonCreateNestedOneWithoutTheoryInput
}

export type TheoryLessonUncheckedCreateWithoutCompletedByInput = {
  id?: number
  content: string
  lessonId: number
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type TheoryLessonCreateOrConnectWithoutCompletedByInput = {
  where: Prisma.TheoryLessonWhereUniqueInput
  create: Prisma.XOR<Prisma.TheoryLessonCreateWithoutCompletedByInput, Prisma.TheoryLessonUncheckedCreateWithoutCompletedByInput>
}

export type TheoryLessonUpsertWithWhereUniqueWithoutCompletedByInput = {
  where: Prisma.TheoryLessonWhereUniqueInput
  update: Prisma.XOR<Prisma.TheoryLessonUpdateWithoutCompletedByInput, Prisma.TheoryLessonUncheckedUpdateWithoutCompletedByInput>
  create: Prisma.XOR<Prisma.TheoryLessonCreateWithoutCompletedByInput, Prisma.TheoryLessonUncheckedCreateWithoutCompletedByInput>
}

export type TheoryLessonUpdateWithWhereUniqueWithoutCompletedByInput = {
  where: Prisma.TheoryLessonWhereUniqueInput
  data: Prisma.XOR<Prisma.TheoryLessonUpdateWithoutCompletedByInput, Prisma.TheoryLessonUncheckedUpdateWithoutCompletedByInput>
}

export type TheoryLessonUpdateManyWithWhereWithoutCompletedByInput = {
  where: Prisma.TheoryLessonScalarWhereInput
  data: Prisma.XOR<Prisma.TheoryLessonUpdateManyMutationInput, Prisma.TheoryLessonUncheckedUpdateManyWithoutCompletedByInput>
}

export type TheoryLessonScalarWhereInput = {
  AND?: Prisma.TheoryLessonScalarWhereInput | Prisma.TheoryLessonScalarWhereInput[]
  OR?: Prisma.TheoryLessonScalarWhereInput[]
  NOT?: Prisma.TheoryLessonScalarWhereInput | Prisma.TheoryLessonScalarWhereInput[]
  id?: Prisma.IntFilter<"TheoryLesson"> | number
  content?: Prisma.StringFilter<"TheoryLesson"> | string
  lessonId?: Prisma.IntFilter<"TheoryLesson"> | number
  createdAt?: Prisma.DateTimeFilter<"TheoryLesson"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"TheoryLesson"> | Date | string
}

export type TheoryLessonCreateWithoutLessonInput = {
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  completedBy?: Prisma.UserCreateNestedManyWithoutCompletedTheoryLessonsInput
}

export type TheoryLessonUncheckedCreateWithoutLessonInput = {
  id?: number
  content: string
  createdAt?: Date | string
  updatedAt?: Date | string
  completedBy?: Prisma.UserUncheckedCreateNestedManyWithoutCompletedTheoryLessonsInput
}

export type TheoryLessonCreateOrConnectWithoutLessonInput = {
  where: Prisma.TheoryLessonWhereUniqueInput
  create: Prisma.XOR<Prisma.TheoryLessonCreateWithoutLessonInput, Prisma.TheoryLessonUncheckedCreateWithoutLessonInput>
}

export type TheoryLessonUpsertWithoutLessonInput = {
  update: Prisma.XOR<Prisma.TheoryLessonUpdateWithoutLessonInput, Prisma.TheoryLessonUncheckedUpdateWithoutLessonInput>
  create: Prisma.XOR<Prisma.TheoryLessonCreateWithoutLessonInput, Prisma.TheoryLessonUncheckedCreateWithoutLessonInput>
  where?: Prisma.TheoryLessonWhereInput
}

export type TheoryLessonUpdateToOneWithWhereWithoutLessonInput = {
  where?: Prisma.TheoryLessonWhereInput
  data: Prisma.XOR<Prisma.TheoryLessonUpdateWithoutLessonInput, Prisma.TheoryLessonUncheckedUpdateWithoutLessonInput>
}

export type TheoryLessonUpdateWithoutLessonInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedBy?: Prisma.UserUpdateManyWithoutCompletedTheoryLessonsNestedInput
}

export type TheoryLessonUncheckedUpdateWithoutLessonInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedBy?: Prisma.UserUncheckedUpdateManyWithoutCompletedTheoryLessonsNestedInput
}

export type TheoryLessonUpdateWithoutCompletedByInput = {
  content?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  lesson?: Prisma.LessonUpdateOneRequiredWithoutTheoryNestedInput
}

export type TheoryLessonUncheckedUpdateWithoutCompletedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  lessonId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type TheoryLessonUncheckedUpdateManyWithoutCompletedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  lessonId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type TheoryLessonCountOutputType
 */

export type TheoryLessonCountOutputType = {
  completedBy: number
}

export type TheoryLessonCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  completedBy?: boolean | TheoryLessonCountOutputTypeCountCompletedByArgs
}

/**
 * TheoryLessonCountOutputType without action
 */
export type TheoryLessonCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TheoryLessonCountOutputType
   */
  select?: Prisma.TheoryLessonCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TheoryLessonCountOutputType without action
 */
export type TheoryLessonCountOutputTypeCountCompletedByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWhereInput
}


export type TheoryLessonSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  lessonId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
  completedBy?: boolean | Prisma.TheoryLesson$completedByArgs<ExtArgs>
  _count?: boolean | Prisma.TheoryLessonCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["theoryLesson"]>

export type TheoryLessonSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  lessonId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["theoryLesson"]>

export type TheoryLessonSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  content?: boolean
  lessonId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}, ExtArgs["result"]["theoryLesson"]>

export type TheoryLessonSelectScalar = {
  id?: boolean
  content?: boolean
  lessonId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type TheoryLessonOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "content" | "lessonId" | "createdAt" | "updatedAt", ExtArgs["result"]["theoryLesson"]>
export type TheoryLessonInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
  completedBy?: boolean | Prisma.TheoryLesson$completedByArgs<ExtArgs>
  _count?: boolean | Prisma.TheoryLessonCountOutputTypeDefaultArgs<ExtArgs>
}
export type TheoryLessonIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}
export type TheoryLessonIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  lesson?: boolean | Prisma.LessonDefaultArgs<ExtArgs>
}

export type $TheoryLessonPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "TheoryLesson"
  objects: {
    lesson: Prisma.$LessonPayload<ExtArgs>
    completedBy: Prisma.$UserPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    content: string
    lessonId: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["theoryLesson"]>
  composites: {}
}

export type TheoryLessonGetPayload<S extends boolean | null | undefined | TheoryLessonDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TheoryLessonPayload, S>

export type TheoryLessonCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TheoryLessonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TheoryLessonCountAggregateInputType | true
  }

export interface TheoryLessonDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TheoryLesson'], meta: { name: 'TheoryLesson' } }
  /**
   * Find zero or one TheoryLesson that matches the filter.
   * @param {TheoryLessonFindUniqueArgs} args - Arguments to find a TheoryLesson
   * @example
   * // Get one TheoryLesson
   * const theoryLesson = await prisma.theoryLesson.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TheoryLessonFindUniqueArgs>(args: Prisma.SelectSubset<T, TheoryLessonFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TheoryLessonClient<runtime.Types.Result.GetResult<Prisma.$TheoryLessonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one TheoryLesson that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TheoryLessonFindUniqueOrThrowArgs} args - Arguments to find a TheoryLesson
   * @example
   * // Get one TheoryLesson
   * const theoryLesson = await prisma.theoryLesson.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TheoryLessonFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TheoryLessonFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TheoryLessonClient<runtime.Types.Result.GetResult<Prisma.$TheoryLessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TheoryLesson that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TheoryLessonFindFirstArgs} args - Arguments to find a TheoryLesson
   * @example
   * // Get one TheoryLesson
   * const theoryLesson = await prisma.theoryLesson.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TheoryLessonFindFirstArgs>(args?: Prisma.SelectSubset<T, TheoryLessonFindFirstArgs<ExtArgs>>): Prisma.Prisma__TheoryLessonClient<runtime.Types.Result.GetResult<Prisma.$TheoryLessonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first TheoryLesson that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TheoryLessonFindFirstOrThrowArgs} args - Arguments to find a TheoryLesson
   * @example
   * // Get one TheoryLesson
   * const theoryLesson = await prisma.theoryLesson.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TheoryLessonFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TheoryLessonFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TheoryLessonClient<runtime.Types.Result.GetResult<Prisma.$TheoryLessonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more TheoryLessons that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TheoryLessonFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all TheoryLessons
   * const theoryLessons = await prisma.theoryLesson.findMany()
   * 
   * // Get first 10 TheoryLessons
   * const theoryLessons = await prisma.theoryLesson.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const theoryLessonWithIdOnly = await prisma.theoryLesson.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TheoryLessonFindManyArgs>(args?: Prisma.SelectSubset<T, TheoryLessonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TheoryLessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a TheoryLesson.
   * @param {TheoryLessonCreateArgs} args - Arguments to create a TheoryLesson.
   * @example
   * // Create one TheoryLesson
   * const TheoryLesson = await prisma.theoryLesson.create({
   *   data: {
   *     // ... data to create a TheoryLesson
   *   }
   * })
   * 
   */
  create<T extends TheoryLessonCreateArgs>(args: Prisma.SelectSubset<T, TheoryLessonCreateArgs<ExtArgs>>): Prisma.Prisma__TheoryLessonClient<runtime.Types.Result.GetResult<Prisma.$TheoryLessonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many TheoryLessons.
   * @param {TheoryLessonCreateManyArgs} args - Arguments to create many TheoryLessons.
   * @example
   * // Create many TheoryLessons
   * const theoryLesson = await prisma.theoryLesson.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TheoryLessonCreateManyArgs>(args?: Prisma.SelectSubset<T, TheoryLessonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many TheoryLessons and returns the data saved in the database.
   * @param {TheoryLessonCreateManyAndReturnArgs} args - Arguments to create many TheoryLessons.
   * @example
   * // Create many TheoryLessons
   * const theoryLesson = await prisma.theoryLesson.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many TheoryLessons and only return the `id`
   * const theoryLessonWithIdOnly = await prisma.theoryLesson.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TheoryLessonCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TheoryLessonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TheoryLessonPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a TheoryLesson.
   * @param {TheoryLessonDeleteArgs} args - Arguments to delete one TheoryLesson.
   * @example
   * // Delete one TheoryLesson
   * const TheoryLesson = await prisma.theoryLesson.delete({
   *   where: {
   *     // ... filter to delete one TheoryLesson
   *   }
   * })
   * 
   */
  delete<T extends TheoryLessonDeleteArgs>(args: Prisma.SelectSubset<T, TheoryLessonDeleteArgs<ExtArgs>>): Prisma.Prisma__TheoryLessonClient<runtime.Types.Result.GetResult<Prisma.$TheoryLessonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one TheoryLesson.
   * @param {TheoryLessonUpdateArgs} args - Arguments to update one TheoryLesson.
   * @example
   * // Update one TheoryLesson
   * const theoryLesson = await prisma.theoryLesson.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TheoryLessonUpdateArgs>(args: Prisma.SelectSubset<T, TheoryLessonUpdateArgs<ExtArgs>>): Prisma.Prisma__TheoryLessonClient<runtime.Types.Result.GetResult<Prisma.$TheoryLessonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more TheoryLessons.
   * @param {TheoryLessonDeleteManyArgs} args - Arguments to filter TheoryLessons to delete.
   * @example
   * // Delete a few TheoryLessons
   * const { count } = await prisma.theoryLesson.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TheoryLessonDeleteManyArgs>(args?: Prisma.SelectSubset<T, TheoryLessonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TheoryLessons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TheoryLessonUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many TheoryLessons
   * const theoryLesson = await prisma.theoryLesson.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TheoryLessonUpdateManyArgs>(args: Prisma.SelectSubset<T, TheoryLessonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more TheoryLessons and returns the data updated in the database.
   * @param {TheoryLessonUpdateManyAndReturnArgs} args - Arguments to update many TheoryLessons.
   * @example
   * // Update many TheoryLessons
   * const theoryLesson = await prisma.theoryLesson.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more TheoryLessons and only return the `id`
   * const theoryLessonWithIdOnly = await prisma.theoryLesson.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TheoryLessonUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TheoryLessonUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TheoryLessonPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one TheoryLesson.
   * @param {TheoryLessonUpsertArgs} args - Arguments to update or create a TheoryLesson.
   * @example
   * // Update or create a TheoryLesson
   * const theoryLesson = await prisma.theoryLesson.upsert({
   *   create: {
   *     // ... data to create a TheoryLesson
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the TheoryLesson we want to update
   *   }
   * })
   */
  upsert<T extends TheoryLessonUpsertArgs>(args: Prisma.SelectSubset<T, TheoryLessonUpsertArgs<ExtArgs>>): Prisma.Prisma__TheoryLessonClient<runtime.Types.Result.GetResult<Prisma.$TheoryLessonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of TheoryLessons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TheoryLessonCountArgs} args - Arguments to filter TheoryLessons to count.
   * @example
   * // Count the number of TheoryLessons
   * const count = await prisma.theoryLesson.count({
   *   where: {
   *     // ... the filter for the TheoryLessons we want to count
   *   }
   * })
  **/
  count<T extends TheoryLessonCountArgs>(
    args?: Prisma.Subset<T, TheoryLessonCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TheoryLessonCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a TheoryLesson.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TheoryLessonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TheoryLessonAggregateArgs>(args: Prisma.Subset<T, TheoryLessonAggregateArgs>): Prisma.PrismaPromise<GetTheoryLessonAggregateType<T>>

  /**
   * Group by TheoryLesson.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TheoryLessonGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TheoryLessonGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TheoryLessonGroupByArgs['orderBy'] }
      : { orderBy?: TheoryLessonGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TheoryLessonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTheoryLessonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the TheoryLesson model
 */
readonly fields: TheoryLessonFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for TheoryLesson.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TheoryLessonClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  lesson<T extends Prisma.LessonDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.LessonDefaultArgs<ExtArgs>>): Prisma.Prisma__LessonClient<runtime.Types.Result.GetResult<Prisma.$LessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  completedBy<T extends Prisma.TheoryLesson$completedByArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.TheoryLesson$completedByArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the TheoryLesson model
 */
export interface TheoryLessonFieldRefs {
  readonly id: Prisma.FieldRef<"TheoryLesson", 'Int'>
  readonly content: Prisma.FieldRef<"TheoryLesson", 'String'>
  readonly lessonId: Prisma.FieldRef<"TheoryLesson", 'Int'>
  readonly createdAt: Prisma.FieldRef<"TheoryLesson", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"TheoryLesson", 'DateTime'>
}
    

// Custom InputTypes
/**
 * TheoryLesson findUnique
 */
export type TheoryLessonFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TheoryLesson
   */
  select?: Prisma.TheoryLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TheoryLesson
   */
  omit?: Prisma.TheoryLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TheoryLessonInclude<ExtArgs> | null
  /**
   * Filter, which TheoryLesson to fetch.
   */
  where: Prisma.TheoryLessonWhereUniqueInput
}

/**
 * TheoryLesson findUniqueOrThrow
 */
export type TheoryLessonFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TheoryLesson
   */
  select?: Prisma.TheoryLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TheoryLesson
   */
  omit?: Prisma.TheoryLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TheoryLessonInclude<ExtArgs> | null
  /**
   * Filter, which TheoryLesson to fetch.
   */
  where: Prisma.TheoryLessonWhereUniqueInput
}

/**
 * TheoryLesson findFirst
 */
export type TheoryLessonFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TheoryLesson
   */
  select?: Prisma.TheoryLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TheoryLesson
   */
  omit?: Prisma.TheoryLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TheoryLessonInclude<ExtArgs> | null
  /**
   * Filter, which TheoryLesson to fetch.
   */
  where?: Prisma.TheoryLessonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TheoryLessons to fetch.
   */
  orderBy?: Prisma.TheoryLessonOrderByWithRelationInput | Prisma.TheoryLessonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TheoryLessons.
   */
  cursor?: Prisma.TheoryLessonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TheoryLessons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TheoryLessons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TheoryLessons.
   */
  distinct?: Prisma.TheoryLessonScalarFieldEnum | Prisma.TheoryLessonScalarFieldEnum[]
}

/**
 * TheoryLesson findFirstOrThrow
 */
export type TheoryLessonFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TheoryLesson
   */
  select?: Prisma.TheoryLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TheoryLesson
   */
  omit?: Prisma.TheoryLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TheoryLessonInclude<ExtArgs> | null
  /**
   * Filter, which TheoryLesson to fetch.
   */
  where?: Prisma.TheoryLessonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TheoryLessons to fetch.
   */
  orderBy?: Prisma.TheoryLessonOrderByWithRelationInput | Prisma.TheoryLessonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for TheoryLessons.
   */
  cursor?: Prisma.TheoryLessonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TheoryLessons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TheoryLessons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of TheoryLessons.
   */
  distinct?: Prisma.TheoryLessonScalarFieldEnum | Prisma.TheoryLessonScalarFieldEnum[]
}

/**
 * TheoryLesson findMany
 */
export type TheoryLessonFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TheoryLesson
   */
  select?: Prisma.TheoryLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TheoryLesson
   */
  omit?: Prisma.TheoryLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TheoryLessonInclude<ExtArgs> | null
  /**
   * Filter, which TheoryLessons to fetch.
   */
  where?: Prisma.TheoryLessonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of TheoryLessons to fetch.
   */
  orderBy?: Prisma.TheoryLessonOrderByWithRelationInput | Prisma.TheoryLessonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing TheoryLessons.
   */
  cursor?: Prisma.TheoryLessonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` TheoryLessons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` TheoryLessons.
   */
  skip?: number
  distinct?: Prisma.TheoryLessonScalarFieldEnum | Prisma.TheoryLessonScalarFieldEnum[]
}

/**
 * TheoryLesson create
 */
export type TheoryLessonCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TheoryLesson
   */
  select?: Prisma.TheoryLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TheoryLesson
   */
  omit?: Prisma.TheoryLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TheoryLessonInclude<ExtArgs> | null
  /**
   * The data needed to create a TheoryLesson.
   */
  data: Prisma.XOR<Prisma.TheoryLessonCreateInput, Prisma.TheoryLessonUncheckedCreateInput>
}

/**
 * TheoryLesson createMany
 */
export type TheoryLessonCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many TheoryLessons.
   */
  data: Prisma.TheoryLessonCreateManyInput | Prisma.TheoryLessonCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * TheoryLesson createManyAndReturn
 */
export type TheoryLessonCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TheoryLesson
   */
  select?: Prisma.TheoryLessonSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TheoryLesson
   */
  omit?: Prisma.TheoryLessonOmit<ExtArgs> | null
  /**
   * The data used to create many TheoryLessons.
   */
  data: Prisma.TheoryLessonCreateManyInput | Prisma.TheoryLessonCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TheoryLessonIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * TheoryLesson update
 */
export type TheoryLessonUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TheoryLesson
   */
  select?: Prisma.TheoryLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TheoryLesson
   */
  omit?: Prisma.TheoryLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TheoryLessonInclude<ExtArgs> | null
  /**
   * The data needed to update a TheoryLesson.
   */
  data: Prisma.XOR<Prisma.TheoryLessonUpdateInput, Prisma.TheoryLessonUncheckedUpdateInput>
  /**
   * Choose, which TheoryLesson to update.
   */
  where: Prisma.TheoryLessonWhereUniqueInput
}

/**
 * TheoryLesson updateMany
 */
export type TheoryLessonUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update TheoryLessons.
   */
  data: Prisma.XOR<Prisma.TheoryLessonUpdateManyMutationInput, Prisma.TheoryLessonUncheckedUpdateManyInput>
  /**
   * Filter which TheoryLessons to update
   */
  where?: Prisma.TheoryLessonWhereInput
  /**
   * Limit how many TheoryLessons to update.
   */
  limit?: number
}

/**
 * TheoryLesson updateManyAndReturn
 */
export type TheoryLessonUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TheoryLesson
   */
  select?: Prisma.TheoryLessonSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the TheoryLesson
   */
  omit?: Prisma.TheoryLessonOmit<ExtArgs> | null
  /**
   * The data used to update TheoryLessons.
   */
  data: Prisma.XOR<Prisma.TheoryLessonUpdateManyMutationInput, Prisma.TheoryLessonUncheckedUpdateManyInput>
  /**
   * Filter which TheoryLessons to update
   */
  where?: Prisma.TheoryLessonWhereInput
  /**
   * Limit how many TheoryLessons to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TheoryLessonIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * TheoryLesson upsert
 */
export type TheoryLessonUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TheoryLesson
   */
  select?: Prisma.TheoryLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TheoryLesson
   */
  omit?: Prisma.TheoryLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TheoryLessonInclude<ExtArgs> | null
  /**
   * The filter to search for the TheoryLesson to update in case it exists.
   */
  where: Prisma.TheoryLessonWhereUniqueInput
  /**
   * In case the TheoryLesson found by the `where` argument doesn't exist, create a new TheoryLesson with this data.
   */
  create: Prisma.XOR<Prisma.TheoryLessonCreateInput, Prisma.TheoryLessonUncheckedCreateInput>
  /**
   * In case the TheoryLesson was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TheoryLessonUpdateInput, Prisma.TheoryLessonUncheckedUpdateInput>
}

/**
 * TheoryLesson delete
 */
export type TheoryLessonDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TheoryLesson
   */
  select?: Prisma.TheoryLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TheoryLesson
   */
  omit?: Prisma.TheoryLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TheoryLessonInclude<ExtArgs> | null
  /**
   * Filter which TheoryLesson to delete.
   */
  where: Prisma.TheoryLessonWhereUniqueInput
}

/**
 * TheoryLesson deleteMany
 */
export type TheoryLessonDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which TheoryLessons to delete
   */
  where?: Prisma.TheoryLessonWhereInput
  /**
   * Limit how many TheoryLessons to delete.
   */
  limit?: number
}

/**
 * TheoryLesson.completedBy
 */
export type TheoryLesson$completedByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  cursor?: Prisma.UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * TheoryLesson without action
 */
export type TheoryLessonDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TheoryLesson
   */
  select?: Prisma.TheoryLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the TheoryLesson
   */
  omit?: Prisma.TheoryLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TheoryLessonInclude<ExtArgs> | null
}
