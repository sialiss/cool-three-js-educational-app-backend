
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `PracticeLesson` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.ts"
import type * as Prisma from "../internal/prismaNamespace.ts"

/**
 * Model PracticeLesson
 * 
 */
export type PracticeLessonModel = runtime.Types.Result.DefaultSelection<Prisma.$PracticeLessonPayload>

export type AggregatePracticeLesson = {
  _count: PracticeLessonCountAggregateOutputType | null
  _avg: PracticeLessonAvgAggregateOutputType | null
  _sum: PracticeLessonSumAggregateOutputType | null
  _min: PracticeLessonMinAggregateOutputType | null
  _max: PracticeLessonMaxAggregateOutputType | null
}

export type PracticeLessonAvgAggregateOutputType = {
  id: number | null
}

export type PracticeLessonSumAggregateOutputType = {
  id: number | null
}

export type PracticeLessonMinAggregateOutputType = {
  id: number | null
  title: string | null
  description: string | null
  author: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PracticeLessonMaxAggregateOutputType = {
  id: number | null
  title: string | null
  description: string | null
  author: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type PracticeLessonCountAggregateOutputType = {
  id: number
  title: number
  description: number
  author: number
  field: number
  extras: number
  goal: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type PracticeLessonAvgAggregateInputType = {
  id?: true
}

export type PracticeLessonSumAggregateInputType = {
  id?: true
}

export type PracticeLessonMinAggregateInputType = {
  id?: true
  title?: true
  description?: true
  author?: true
  createdAt?: true
  updatedAt?: true
}

export type PracticeLessonMaxAggregateInputType = {
  id?: true
  title?: true
  description?: true
  author?: true
  createdAt?: true
  updatedAt?: true
}

export type PracticeLessonCountAggregateInputType = {
  id?: true
  title?: true
  description?: true
  author?: true
  field?: true
  extras?: true
  goal?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type PracticeLessonAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PracticeLesson to aggregate.
   */
  where?: Prisma.PracticeLessonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PracticeLessons to fetch.
   */
  orderBy?: Prisma.PracticeLessonOrderByWithRelationInput | Prisma.PracticeLessonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.PracticeLessonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PracticeLessons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PracticeLessons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned PracticeLessons
  **/
  _count?: true | PracticeLessonCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: PracticeLessonAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: PracticeLessonSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: PracticeLessonMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: PracticeLessonMaxAggregateInputType
}

export type GetPracticeLessonAggregateType<T extends PracticeLessonAggregateArgs> = {
      [P in keyof T & keyof AggregatePracticeLesson]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregatePracticeLesson[P]>
    : Prisma.GetScalarType<T[P], AggregatePracticeLesson[P]>
}




export type PracticeLessonGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PracticeLessonWhereInput
  orderBy?: Prisma.PracticeLessonOrderByWithAggregationInput | Prisma.PracticeLessonOrderByWithAggregationInput[]
  by: Prisma.PracticeLessonScalarFieldEnum[] | Prisma.PracticeLessonScalarFieldEnum
  having?: Prisma.PracticeLessonScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: PracticeLessonCountAggregateInputType | true
  _avg?: PracticeLessonAvgAggregateInputType
  _sum?: PracticeLessonSumAggregateInputType
  _min?: PracticeLessonMinAggregateInputType
  _max?: PracticeLessonMaxAggregateInputType
}

export type PracticeLessonGroupByOutputType = {
  id: number
  title: string
  description: string
  author: string
  field: runtime.JsonValue
  extras: runtime.JsonValue
  goal: runtime.JsonValue
  createdAt: Date
  updatedAt: Date
  _count: PracticeLessonCountAggregateOutputType | null
  _avg: PracticeLessonAvgAggregateOutputType | null
  _sum: PracticeLessonSumAggregateOutputType | null
  _min: PracticeLessonMinAggregateOutputType | null
  _max: PracticeLessonMaxAggregateOutputType | null
}

type GetPracticeLessonGroupByPayload<T extends PracticeLessonGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<PracticeLessonGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof PracticeLessonGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], PracticeLessonGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], PracticeLessonGroupByOutputType[P]>
      }
    >
  > 



export type PracticeLessonWhereInput = {
  AND?: Prisma.PracticeLessonWhereInput | Prisma.PracticeLessonWhereInput[]
  OR?: Prisma.PracticeLessonWhereInput[]
  NOT?: Prisma.PracticeLessonWhereInput | Prisma.PracticeLessonWhereInput[]
  id?: Prisma.IntFilter<"PracticeLesson"> | number
  title?: Prisma.StringFilter<"PracticeLesson"> | string
  description?: Prisma.StringFilter<"PracticeLesson"> | string
  author?: Prisma.StringFilter<"PracticeLesson"> | string
  field?: Prisma.JsonFilter<"PracticeLesson">
  extras?: Prisma.JsonFilter<"PracticeLesson">
  goal?: Prisma.JsonFilter<"PracticeLesson">
  createdAt?: Prisma.DateTimeFilter<"PracticeLesson"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PracticeLesson"> | Date | string
  completedBy?: Prisma.UserListRelationFilter
}

export type PracticeLessonOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  author?: Prisma.SortOrder
  field?: Prisma.SortOrder
  extras?: Prisma.SortOrder
  goal?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  completedBy?: Prisma.UserOrderByRelationAggregateInput
}

export type PracticeLessonWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.PracticeLessonWhereInput | Prisma.PracticeLessonWhereInput[]
  OR?: Prisma.PracticeLessonWhereInput[]
  NOT?: Prisma.PracticeLessonWhereInput | Prisma.PracticeLessonWhereInput[]
  title?: Prisma.StringFilter<"PracticeLesson"> | string
  description?: Prisma.StringFilter<"PracticeLesson"> | string
  author?: Prisma.StringFilter<"PracticeLesson"> | string
  field?: Prisma.JsonFilter<"PracticeLesson">
  extras?: Prisma.JsonFilter<"PracticeLesson">
  goal?: Prisma.JsonFilter<"PracticeLesson">
  createdAt?: Prisma.DateTimeFilter<"PracticeLesson"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PracticeLesson"> | Date | string
  completedBy?: Prisma.UserListRelationFilter
}, "id">

export type PracticeLessonOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  author?: Prisma.SortOrder
  field?: Prisma.SortOrder
  extras?: Prisma.SortOrder
  goal?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.PracticeLessonCountOrderByAggregateInput
  _avg?: Prisma.PracticeLessonAvgOrderByAggregateInput
  _max?: Prisma.PracticeLessonMaxOrderByAggregateInput
  _min?: Prisma.PracticeLessonMinOrderByAggregateInput
  _sum?: Prisma.PracticeLessonSumOrderByAggregateInput
}

export type PracticeLessonScalarWhereWithAggregatesInput = {
  AND?: Prisma.PracticeLessonScalarWhereWithAggregatesInput | Prisma.PracticeLessonScalarWhereWithAggregatesInput[]
  OR?: Prisma.PracticeLessonScalarWhereWithAggregatesInput[]
  NOT?: Prisma.PracticeLessonScalarWhereWithAggregatesInput | Prisma.PracticeLessonScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"PracticeLesson"> | number
  title?: Prisma.StringWithAggregatesFilter<"PracticeLesson"> | string
  description?: Prisma.StringWithAggregatesFilter<"PracticeLesson"> | string
  author?: Prisma.StringWithAggregatesFilter<"PracticeLesson"> | string
  field?: Prisma.JsonWithAggregatesFilter<"PracticeLesson">
  extras?: Prisma.JsonWithAggregatesFilter<"PracticeLesson">
  goal?: Prisma.JsonWithAggregatesFilter<"PracticeLesson">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"PracticeLesson"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"PracticeLesson"> | Date | string
}

export type PracticeLessonCreateInput = {
  title: string
  description: string
  author: string
  field: Prisma.JsonNullValueInput | runtime.InputJsonValue
  extras: Prisma.JsonNullValueInput | runtime.InputJsonValue
  goal: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  completedBy?: Prisma.UserCreateNestedManyWithoutCompletedPracticeLessonsInput
}

export type PracticeLessonUncheckedCreateInput = {
  id?: number
  title: string
  description: string
  author: string
  field: Prisma.JsonNullValueInput | runtime.InputJsonValue
  extras: Prisma.JsonNullValueInput | runtime.InputJsonValue
  goal: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
  completedBy?: Prisma.UserUncheckedCreateNestedManyWithoutCompletedPracticeLessonsInput
}

export type PracticeLessonUpdateInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.StringFieldUpdateOperationsInput | string
  field?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  extras?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  goal?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedBy?: Prisma.UserUpdateManyWithoutCompletedPracticeLessonsNestedInput
}

export type PracticeLessonUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.StringFieldUpdateOperationsInput | string
  field?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  extras?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  goal?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  completedBy?: Prisma.UserUncheckedUpdateManyWithoutCompletedPracticeLessonsNestedInput
}

export type PracticeLessonCreateManyInput = {
  id?: number
  title: string
  description: string
  author: string
  field: Prisma.JsonNullValueInput | runtime.InputJsonValue
  extras: Prisma.JsonNullValueInput | runtime.InputJsonValue
  goal: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PracticeLessonUpdateManyMutationInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.StringFieldUpdateOperationsInput | string
  field?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  extras?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  goal?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PracticeLessonUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.StringFieldUpdateOperationsInput | string
  field?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  extras?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  goal?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PracticeLessonListRelationFilter = {
  every?: Prisma.PracticeLessonWhereInput
  some?: Prisma.PracticeLessonWhereInput
  none?: Prisma.PracticeLessonWhereInput
}

export type PracticeLessonOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type PracticeLessonCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  author?: Prisma.SortOrder
  field?: Prisma.SortOrder
  extras?: Prisma.SortOrder
  goal?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PracticeLessonAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PracticeLessonMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  author?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PracticeLessonMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  description?: Prisma.SortOrder
  author?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type PracticeLessonSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
}

export type PracticeLessonCreateNestedManyWithoutCompletedByInput = {
  create?: Prisma.XOR<Prisma.PracticeLessonCreateWithoutCompletedByInput, Prisma.PracticeLessonUncheckedCreateWithoutCompletedByInput> | Prisma.PracticeLessonCreateWithoutCompletedByInput[] | Prisma.PracticeLessonUncheckedCreateWithoutCompletedByInput[]
  connectOrCreate?: Prisma.PracticeLessonCreateOrConnectWithoutCompletedByInput | Prisma.PracticeLessonCreateOrConnectWithoutCompletedByInput[]
  connect?: Prisma.PracticeLessonWhereUniqueInput | Prisma.PracticeLessonWhereUniqueInput[]
}

export type PracticeLessonUncheckedCreateNestedManyWithoutCompletedByInput = {
  create?: Prisma.XOR<Prisma.PracticeLessonCreateWithoutCompletedByInput, Prisma.PracticeLessonUncheckedCreateWithoutCompletedByInput> | Prisma.PracticeLessonCreateWithoutCompletedByInput[] | Prisma.PracticeLessonUncheckedCreateWithoutCompletedByInput[]
  connectOrCreate?: Prisma.PracticeLessonCreateOrConnectWithoutCompletedByInput | Prisma.PracticeLessonCreateOrConnectWithoutCompletedByInput[]
  connect?: Prisma.PracticeLessonWhereUniqueInput | Prisma.PracticeLessonWhereUniqueInput[]
}

export type PracticeLessonUpdateManyWithoutCompletedByNestedInput = {
  create?: Prisma.XOR<Prisma.PracticeLessonCreateWithoutCompletedByInput, Prisma.PracticeLessonUncheckedCreateWithoutCompletedByInput> | Prisma.PracticeLessonCreateWithoutCompletedByInput[] | Prisma.PracticeLessonUncheckedCreateWithoutCompletedByInput[]
  connectOrCreate?: Prisma.PracticeLessonCreateOrConnectWithoutCompletedByInput | Prisma.PracticeLessonCreateOrConnectWithoutCompletedByInput[]
  upsert?: Prisma.PracticeLessonUpsertWithWhereUniqueWithoutCompletedByInput | Prisma.PracticeLessonUpsertWithWhereUniqueWithoutCompletedByInput[]
  set?: Prisma.PracticeLessonWhereUniqueInput | Prisma.PracticeLessonWhereUniqueInput[]
  disconnect?: Prisma.PracticeLessonWhereUniqueInput | Prisma.PracticeLessonWhereUniqueInput[]
  delete?: Prisma.PracticeLessonWhereUniqueInput | Prisma.PracticeLessonWhereUniqueInput[]
  connect?: Prisma.PracticeLessonWhereUniqueInput | Prisma.PracticeLessonWhereUniqueInput[]
  update?: Prisma.PracticeLessonUpdateWithWhereUniqueWithoutCompletedByInput | Prisma.PracticeLessonUpdateWithWhereUniqueWithoutCompletedByInput[]
  updateMany?: Prisma.PracticeLessonUpdateManyWithWhereWithoutCompletedByInput | Prisma.PracticeLessonUpdateManyWithWhereWithoutCompletedByInput[]
  deleteMany?: Prisma.PracticeLessonScalarWhereInput | Prisma.PracticeLessonScalarWhereInput[]
}

export type PracticeLessonUncheckedUpdateManyWithoutCompletedByNestedInput = {
  create?: Prisma.XOR<Prisma.PracticeLessonCreateWithoutCompletedByInput, Prisma.PracticeLessonUncheckedCreateWithoutCompletedByInput> | Prisma.PracticeLessonCreateWithoutCompletedByInput[] | Prisma.PracticeLessonUncheckedCreateWithoutCompletedByInput[]
  connectOrCreate?: Prisma.PracticeLessonCreateOrConnectWithoutCompletedByInput | Prisma.PracticeLessonCreateOrConnectWithoutCompletedByInput[]
  upsert?: Prisma.PracticeLessonUpsertWithWhereUniqueWithoutCompletedByInput | Prisma.PracticeLessonUpsertWithWhereUniqueWithoutCompletedByInput[]
  set?: Prisma.PracticeLessonWhereUniqueInput | Prisma.PracticeLessonWhereUniqueInput[]
  disconnect?: Prisma.PracticeLessonWhereUniqueInput | Prisma.PracticeLessonWhereUniqueInput[]
  delete?: Prisma.PracticeLessonWhereUniqueInput | Prisma.PracticeLessonWhereUniqueInput[]
  connect?: Prisma.PracticeLessonWhereUniqueInput | Prisma.PracticeLessonWhereUniqueInput[]
  update?: Prisma.PracticeLessonUpdateWithWhereUniqueWithoutCompletedByInput | Prisma.PracticeLessonUpdateWithWhereUniqueWithoutCompletedByInput[]
  updateMany?: Prisma.PracticeLessonUpdateManyWithWhereWithoutCompletedByInput | Prisma.PracticeLessonUpdateManyWithWhereWithoutCompletedByInput[]
  deleteMany?: Prisma.PracticeLessonScalarWhereInput | Prisma.PracticeLessonScalarWhereInput[]
}

export type PracticeLessonCreateWithoutCompletedByInput = {
  title: string
  description: string
  author: string
  field: Prisma.JsonNullValueInput | runtime.InputJsonValue
  extras: Prisma.JsonNullValueInput | runtime.InputJsonValue
  goal: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PracticeLessonUncheckedCreateWithoutCompletedByInput = {
  id?: number
  title: string
  description: string
  author: string
  field: Prisma.JsonNullValueInput | runtime.InputJsonValue
  extras: Prisma.JsonNullValueInput | runtime.InputJsonValue
  goal: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type PracticeLessonCreateOrConnectWithoutCompletedByInput = {
  where: Prisma.PracticeLessonWhereUniqueInput
  create: Prisma.XOR<Prisma.PracticeLessonCreateWithoutCompletedByInput, Prisma.PracticeLessonUncheckedCreateWithoutCompletedByInput>
}

export type PracticeLessonUpsertWithWhereUniqueWithoutCompletedByInput = {
  where: Prisma.PracticeLessonWhereUniqueInput
  update: Prisma.XOR<Prisma.PracticeLessonUpdateWithoutCompletedByInput, Prisma.PracticeLessonUncheckedUpdateWithoutCompletedByInput>
  create: Prisma.XOR<Prisma.PracticeLessonCreateWithoutCompletedByInput, Prisma.PracticeLessonUncheckedCreateWithoutCompletedByInput>
}

export type PracticeLessonUpdateWithWhereUniqueWithoutCompletedByInput = {
  where: Prisma.PracticeLessonWhereUniqueInput
  data: Prisma.XOR<Prisma.PracticeLessonUpdateWithoutCompletedByInput, Prisma.PracticeLessonUncheckedUpdateWithoutCompletedByInput>
}

export type PracticeLessonUpdateManyWithWhereWithoutCompletedByInput = {
  where: Prisma.PracticeLessonScalarWhereInput
  data: Prisma.XOR<Prisma.PracticeLessonUpdateManyMutationInput, Prisma.PracticeLessonUncheckedUpdateManyWithoutCompletedByInput>
}

export type PracticeLessonScalarWhereInput = {
  AND?: Prisma.PracticeLessonScalarWhereInput | Prisma.PracticeLessonScalarWhereInput[]
  OR?: Prisma.PracticeLessonScalarWhereInput[]
  NOT?: Prisma.PracticeLessonScalarWhereInput | Prisma.PracticeLessonScalarWhereInput[]
  id?: Prisma.IntFilter<"PracticeLesson"> | number
  title?: Prisma.StringFilter<"PracticeLesson"> | string
  description?: Prisma.StringFilter<"PracticeLesson"> | string
  author?: Prisma.StringFilter<"PracticeLesson"> | string
  field?: Prisma.JsonFilter<"PracticeLesson">
  extras?: Prisma.JsonFilter<"PracticeLesson">
  goal?: Prisma.JsonFilter<"PracticeLesson">
  createdAt?: Prisma.DateTimeFilter<"PracticeLesson"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"PracticeLesson"> | Date | string
}

export type PracticeLessonUpdateWithoutCompletedByInput = {
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.StringFieldUpdateOperationsInput | string
  field?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  extras?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  goal?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PracticeLessonUncheckedUpdateWithoutCompletedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.StringFieldUpdateOperationsInput | string
  field?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  extras?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  goal?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type PracticeLessonUncheckedUpdateManyWithoutCompletedByInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  title?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  author?: Prisma.StringFieldUpdateOperationsInput | string
  field?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  extras?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  goal?: Prisma.JsonNullValueInput | runtime.InputJsonValue
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type PracticeLessonCountOutputType
 */

export type PracticeLessonCountOutputType = {
  completedBy: number
}

export type PracticeLessonCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  completedBy?: boolean | PracticeLessonCountOutputTypeCountCompletedByArgs
}

/**
 * PracticeLessonCountOutputType without action
 */
export type PracticeLessonCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PracticeLessonCountOutputType
   */
  select?: Prisma.PracticeLessonCountOutputTypeSelect<ExtArgs> | null
}

/**
 * PracticeLessonCountOutputType without action
 */
export type PracticeLessonCountOutputTypeCountCompletedByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.UserWhereInput
}


export type PracticeLessonSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  author?: boolean
  field?: boolean
  extras?: boolean
  goal?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  completedBy?: boolean | Prisma.PracticeLesson$completedByArgs<ExtArgs>
  _count?: boolean | Prisma.PracticeLessonCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["practiceLesson"]>

export type PracticeLessonSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  author?: boolean
  field?: boolean
  extras?: boolean
  goal?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["practiceLesson"]>

export type PracticeLessonSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  description?: boolean
  author?: boolean
  field?: boolean
  extras?: boolean
  goal?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["practiceLesson"]>

export type PracticeLessonSelectScalar = {
  id?: boolean
  title?: boolean
  description?: boolean
  author?: boolean
  field?: boolean
  extras?: boolean
  goal?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type PracticeLessonOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "description" | "author" | "field" | "extras" | "goal" | "createdAt" | "updatedAt", ExtArgs["result"]["practiceLesson"]>
export type PracticeLessonInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  completedBy?: boolean | Prisma.PracticeLesson$completedByArgs<ExtArgs>
  _count?: boolean | Prisma.PracticeLessonCountOutputTypeDefaultArgs<ExtArgs>
}
export type PracticeLessonIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type PracticeLessonIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $PracticeLessonPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "PracticeLesson"
  objects: {
    completedBy: Prisma.$UserPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    title: string
    description: string
    author: string
    field: runtime.JsonValue
    extras: runtime.JsonValue
    goal: runtime.JsonValue
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["practiceLesson"]>
  composites: {}
}

export type PracticeLessonGetPayload<S extends boolean | null | undefined | PracticeLessonDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$PracticeLessonPayload, S>

export type PracticeLessonCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<PracticeLessonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: PracticeLessonCountAggregateInputType | true
  }

export interface PracticeLessonDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PracticeLesson'], meta: { name: 'PracticeLesson' } }
  /**
   * Find zero or one PracticeLesson that matches the filter.
   * @param {PracticeLessonFindUniqueArgs} args - Arguments to find a PracticeLesson
   * @example
   * // Get one PracticeLesson
   * const practiceLesson = await prisma.practiceLesson.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends PracticeLessonFindUniqueArgs>(args: Prisma.SelectSubset<T, PracticeLessonFindUniqueArgs<ExtArgs>>): Prisma.Prisma__PracticeLessonClient<runtime.Types.Result.GetResult<Prisma.$PracticeLessonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one PracticeLesson that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {PracticeLessonFindUniqueOrThrowArgs} args - Arguments to find a PracticeLesson
   * @example
   * // Get one PracticeLesson
   * const practiceLesson = await prisma.practiceLesson.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends PracticeLessonFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, PracticeLessonFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__PracticeLessonClient<runtime.Types.Result.GetResult<Prisma.$PracticeLessonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PracticeLesson that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PracticeLessonFindFirstArgs} args - Arguments to find a PracticeLesson
   * @example
   * // Get one PracticeLesson
   * const practiceLesson = await prisma.practiceLesson.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends PracticeLessonFindFirstArgs>(args?: Prisma.SelectSubset<T, PracticeLessonFindFirstArgs<ExtArgs>>): Prisma.Prisma__PracticeLessonClient<runtime.Types.Result.GetResult<Prisma.$PracticeLessonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first PracticeLesson that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PracticeLessonFindFirstOrThrowArgs} args - Arguments to find a PracticeLesson
   * @example
   * // Get one PracticeLesson
   * const practiceLesson = await prisma.practiceLesson.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends PracticeLessonFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, PracticeLessonFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__PracticeLessonClient<runtime.Types.Result.GetResult<Prisma.$PracticeLessonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more PracticeLessons that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PracticeLessonFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all PracticeLessons
   * const practiceLessons = await prisma.practiceLesson.findMany()
   * 
   * // Get first 10 PracticeLessons
   * const practiceLessons = await prisma.practiceLesson.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const practiceLessonWithIdOnly = await prisma.practiceLesson.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends PracticeLessonFindManyArgs>(args?: Prisma.SelectSubset<T, PracticeLessonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PracticeLessonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a PracticeLesson.
   * @param {PracticeLessonCreateArgs} args - Arguments to create a PracticeLesson.
   * @example
   * // Create one PracticeLesson
   * const PracticeLesson = await prisma.practiceLesson.create({
   *   data: {
   *     // ... data to create a PracticeLesson
   *   }
   * })
   * 
   */
  create<T extends PracticeLessonCreateArgs>(args: Prisma.SelectSubset<T, PracticeLessonCreateArgs<ExtArgs>>): Prisma.Prisma__PracticeLessonClient<runtime.Types.Result.GetResult<Prisma.$PracticeLessonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many PracticeLessons.
   * @param {PracticeLessonCreateManyArgs} args - Arguments to create many PracticeLessons.
   * @example
   * // Create many PracticeLessons
   * const practiceLesson = await prisma.practiceLesson.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends PracticeLessonCreateManyArgs>(args?: Prisma.SelectSubset<T, PracticeLessonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many PracticeLessons and returns the data saved in the database.
   * @param {PracticeLessonCreateManyAndReturnArgs} args - Arguments to create many PracticeLessons.
   * @example
   * // Create many PracticeLessons
   * const practiceLesson = await prisma.practiceLesson.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many PracticeLessons and only return the `id`
   * const practiceLessonWithIdOnly = await prisma.practiceLesson.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends PracticeLessonCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, PracticeLessonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PracticeLessonPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a PracticeLesson.
   * @param {PracticeLessonDeleteArgs} args - Arguments to delete one PracticeLesson.
   * @example
   * // Delete one PracticeLesson
   * const PracticeLesson = await prisma.practiceLesson.delete({
   *   where: {
   *     // ... filter to delete one PracticeLesson
   *   }
   * })
   * 
   */
  delete<T extends PracticeLessonDeleteArgs>(args: Prisma.SelectSubset<T, PracticeLessonDeleteArgs<ExtArgs>>): Prisma.Prisma__PracticeLessonClient<runtime.Types.Result.GetResult<Prisma.$PracticeLessonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one PracticeLesson.
   * @param {PracticeLessonUpdateArgs} args - Arguments to update one PracticeLesson.
   * @example
   * // Update one PracticeLesson
   * const practiceLesson = await prisma.practiceLesson.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends PracticeLessonUpdateArgs>(args: Prisma.SelectSubset<T, PracticeLessonUpdateArgs<ExtArgs>>): Prisma.Prisma__PracticeLessonClient<runtime.Types.Result.GetResult<Prisma.$PracticeLessonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more PracticeLessons.
   * @param {PracticeLessonDeleteManyArgs} args - Arguments to filter PracticeLessons to delete.
   * @example
   * // Delete a few PracticeLessons
   * const { count } = await prisma.practiceLesson.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends PracticeLessonDeleteManyArgs>(args?: Prisma.SelectSubset<T, PracticeLessonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PracticeLessons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PracticeLessonUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many PracticeLessons
   * const practiceLesson = await prisma.practiceLesson.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends PracticeLessonUpdateManyArgs>(args: Prisma.SelectSubset<T, PracticeLessonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more PracticeLessons and returns the data updated in the database.
   * @param {PracticeLessonUpdateManyAndReturnArgs} args - Arguments to update many PracticeLessons.
   * @example
   * // Update many PracticeLessons
   * const practiceLesson = await prisma.practiceLesson.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more PracticeLessons and only return the `id`
   * const practiceLessonWithIdOnly = await prisma.practiceLesson.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends PracticeLessonUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, PracticeLessonUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PracticeLessonPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one PracticeLesson.
   * @param {PracticeLessonUpsertArgs} args - Arguments to update or create a PracticeLesson.
   * @example
   * // Update or create a PracticeLesson
   * const practiceLesson = await prisma.practiceLesson.upsert({
   *   create: {
   *     // ... data to create a PracticeLesson
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the PracticeLesson we want to update
   *   }
   * })
   */
  upsert<T extends PracticeLessonUpsertArgs>(args: Prisma.SelectSubset<T, PracticeLessonUpsertArgs<ExtArgs>>): Prisma.Prisma__PracticeLessonClient<runtime.Types.Result.GetResult<Prisma.$PracticeLessonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of PracticeLessons.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PracticeLessonCountArgs} args - Arguments to filter PracticeLessons to count.
   * @example
   * // Count the number of PracticeLessons
   * const count = await prisma.practiceLesson.count({
   *   where: {
   *     // ... the filter for the PracticeLessons we want to count
   *   }
   * })
  **/
  count<T extends PracticeLessonCountArgs>(
    args?: Prisma.Subset<T, PracticeLessonCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], PracticeLessonCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a PracticeLesson.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PracticeLessonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends PracticeLessonAggregateArgs>(args: Prisma.Subset<T, PracticeLessonAggregateArgs>): Prisma.PrismaPromise<GetPracticeLessonAggregateType<T>>

  /**
   * Group by PracticeLesson.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {PracticeLessonGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends PracticeLessonGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: PracticeLessonGroupByArgs['orderBy'] }
      : { orderBy?: PracticeLessonGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, PracticeLessonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPracticeLessonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the PracticeLesson model
 */
readonly fields: PracticeLessonFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for PracticeLesson.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__PracticeLessonClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  completedBy<T extends Prisma.PracticeLesson$completedByArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.PracticeLesson$completedByArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the PracticeLesson model
 */
export interface PracticeLessonFieldRefs {
  readonly id: Prisma.FieldRef<"PracticeLesson", 'Int'>
  readonly title: Prisma.FieldRef<"PracticeLesson", 'String'>
  readonly description: Prisma.FieldRef<"PracticeLesson", 'String'>
  readonly author: Prisma.FieldRef<"PracticeLesson", 'String'>
  readonly field: Prisma.FieldRef<"PracticeLesson", 'Json'>
  readonly extras: Prisma.FieldRef<"PracticeLesson", 'Json'>
  readonly goal: Prisma.FieldRef<"PracticeLesson", 'Json'>
  readonly createdAt: Prisma.FieldRef<"PracticeLesson", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"PracticeLesson", 'DateTime'>
}
    

// Custom InputTypes
/**
 * PracticeLesson findUnique
 */
export type PracticeLessonFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PracticeLesson
   */
  select?: Prisma.PracticeLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PracticeLesson
   */
  omit?: Prisma.PracticeLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PracticeLessonInclude<ExtArgs> | null
  /**
   * Filter, which PracticeLesson to fetch.
   */
  where: Prisma.PracticeLessonWhereUniqueInput
}

/**
 * PracticeLesson findUniqueOrThrow
 */
export type PracticeLessonFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PracticeLesson
   */
  select?: Prisma.PracticeLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PracticeLesson
   */
  omit?: Prisma.PracticeLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PracticeLessonInclude<ExtArgs> | null
  /**
   * Filter, which PracticeLesson to fetch.
   */
  where: Prisma.PracticeLessonWhereUniqueInput
}

/**
 * PracticeLesson findFirst
 */
export type PracticeLessonFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PracticeLesson
   */
  select?: Prisma.PracticeLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PracticeLesson
   */
  omit?: Prisma.PracticeLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PracticeLessonInclude<ExtArgs> | null
  /**
   * Filter, which PracticeLesson to fetch.
   */
  where?: Prisma.PracticeLessonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PracticeLessons to fetch.
   */
  orderBy?: Prisma.PracticeLessonOrderByWithRelationInput | Prisma.PracticeLessonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PracticeLessons.
   */
  cursor?: Prisma.PracticeLessonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PracticeLessons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PracticeLessons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PracticeLessons.
   */
  distinct?: Prisma.PracticeLessonScalarFieldEnum | Prisma.PracticeLessonScalarFieldEnum[]
}

/**
 * PracticeLesson findFirstOrThrow
 */
export type PracticeLessonFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PracticeLesson
   */
  select?: Prisma.PracticeLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PracticeLesson
   */
  omit?: Prisma.PracticeLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PracticeLessonInclude<ExtArgs> | null
  /**
   * Filter, which PracticeLesson to fetch.
   */
  where?: Prisma.PracticeLessonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PracticeLessons to fetch.
   */
  orderBy?: Prisma.PracticeLessonOrderByWithRelationInput | Prisma.PracticeLessonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for PracticeLessons.
   */
  cursor?: Prisma.PracticeLessonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PracticeLessons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PracticeLessons.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of PracticeLessons.
   */
  distinct?: Prisma.PracticeLessonScalarFieldEnum | Prisma.PracticeLessonScalarFieldEnum[]
}

/**
 * PracticeLesson findMany
 */
export type PracticeLessonFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PracticeLesson
   */
  select?: Prisma.PracticeLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PracticeLesson
   */
  omit?: Prisma.PracticeLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PracticeLessonInclude<ExtArgs> | null
  /**
   * Filter, which PracticeLessons to fetch.
   */
  where?: Prisma.PracticeLessonWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of PracticeLessons to fetch.
   */
  orderBy?: Prisma.PracticeLessonOrderByWithRelationInput | Prisma.PracticeLessonOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing PracticeLessons.
   */
  cursor?: Prisma.PracticeLessonWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` PracticeLessons from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` PracticeLessons.
   */
  skip?: number
  distinct?: Prisma.PracticeLessonScalarFieldEnum | Prisma.PracticeLessonScalarFieldEnum[]
}

/**
 * PracticeLesson create
 */
export type PracticeLessonCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PracticeLesson
   */
  select?: Prisma.PracticeLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PracticeLesson
   */
  omit?: Prisma.PracticeLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PracticeLessonInclude<ExtArgs> | null
  /**
   * The data needed to create a PracticeLesson.
   */
  data: Prisma.XOR<Prisma.PracticeLessonCreateInput, Prisma.PracticeLessonUncheckedCreateInput>
}

/**
 * PracticeLesson createMany
 */
export type PracticeLessonCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many PracticeLessons.
   */
  data: Prisma.PracticeLessonCreateManyInput | Prisma.PracticeLessonCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PracticeLesson createManyAndReturn
 */
export type PracticeLessonCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PracticeLesson
   */
  select?: Prisma.PracticeLessonSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PracticeLesson
   */
  omit?: Prisma.PracticeLessonOmit<ExtArgs> | null
  /**
   * The data used to create many PracticeLessons.
   */
  data: Prisma.PracticeLessonCreateManyInput | Prisma.PracticeLessonCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * PracticeLesson update
 */
export type PracticeLessonUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PracticeLesson
   */
  select?: Prisma.PracticeLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PracticeLesson
   */
  omit?: Prisma.PracticeLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PracticeLessonInclude<ExtArgs> | null
  /**
   * The data needed to update a PracticeLesson.
   */
  data: Prisma.XOR<Prisma.PracticeLessonUpdateInput, Prisma.PracticeLessonUncheckedUpdateInput>
  /**
   * Choose, which PracticeLesson to update.
   */
  where: Prisma.PracticeLessonWhereUniqueInput
}

/**
 * PracticeLesson updateMany
 */
export type PracticeLessonUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update PracticeLessons.
   */
  data: Prisma.XOR<Prisma.PracticeLessonUpdateManyMutationInput, Prisma.PracticeLessonUncheckedUpdateManyInput>
  /**
   * Filter which PracticeLessons to update
   */
  where?: Prisma.PracticeLessonWhereInput
  /**
   * Limit how many PracticeLessons to update.
   */
  limit?: number
}

/**
 * PracticeLesson updateManyAndReturn
 */
export type PracticeLessonUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PracticeLesson
   */
  select?: Prisma.PracticeLessonSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the PracticeLesson
   */
  omit?: Prisma.PracticeLessonOmit<ExtArgs> | null
  /**
   * The data used to update PracticeLessons.
   */
  data: Prisma.XOR<Prisma.PracticeLessonUpdateManyMutationInput, Prisma.PracticeLessonUncheckedUpdateManyInput>
  /**
   * Filter which PracticeLessons to update
   */
  where?: Prisma.PracticeLessonWhereInput
  /**
   * Limit how many PracticeLessons to update.
   */
  limit?: number
}

/**
 * PracticeLesson upsert
 */
export type PracticeLessonUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PracticeLesson
   */
  select?: Prisma.PracticeLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PracticeLesson
   */
  omit?: Prisma.PracticeLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PracticeLessonInclude<ExtArgs> | null
  /**
   * The filter to search for the PracticeLesson to update in case it exists.
   */
  where: Prisma.PracticeLessonWhereUniqueInput
  /**
   * In case the PracticeLesson found by the `where` argument doesn't exist, create a new PracticeLesson with this data.
   */
  create: Prisma.XOR<Prisma.PracticeLessonCreateInput, Prisma.PracticeLessonUncheckedCreateInput>
  /**
   * In case the PracticeLesson was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.PracticeLessonUpdateInput, Prisma.PracticeLessonUncheckedUpdateInput>
}

/**
 * PracticeLesson delete
 */
export type PracticeLessonDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PracticeLesson
   */
  select?: Prisma.PracticeLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PracticeLesson
   */
  omit?: Prisma.PracticeLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PracticeLessonInclude<ExtArgs> | null
  /**
   * Filter which PracticeLesson to delete.
   */
  where: Prisma.PracticeLessonWhereUniqueInput
}

/**
 * PracticeLesson deleteMany
 */
export type PracticeLessonDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which PracticeLessons to delete
   */
  where?: Prisma.PracticeLessonWhereInput
  /**
   * Limit how many PracticeLessons to delete.
   */
  limit?: number
}

/**
 * PracticeLesson.completedBy
 */
export type PracticeLesson$completedByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput
  orderBy?: Prisma.UserOrderByWithRelationInput | Prisma.UserOrderByWithRelationInput[]
  cursor?: Prisma.UserWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.UserScalarFieldEnum | Prisma.UserScalarFieldEnum[]
}

/**
 * PracticeLesson without action
 */
export type PracticeLessonDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the PracticeLesson
   */
  select?: Prisma.PracticeLessonSelect<ExtArgs> | null
  /**
   * Omit specific fields from the PracticeLesson
   */
  omit?: Prisma.PracticeLessonOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PracticeLessonInclude<ExtArgs> | null
}
